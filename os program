//fixed priority scheduling program

#include<stdio.h>
    struct pr
      {
int n;       //name
int bt;      //brust time
int py;       //priority
      } ;
int  main()
       {
int q,i,n,temp;
int aw,j;
float awt;
struct pr p[10];
printf("enter number of process :\t");
scanf("%d",&n);
printf("\n enter brust time  and priority\n");
for(i=0;i<n;i++)
  {
     printf("P%d  ",i+1);     p[i].n=i+1;
     scanf("%d%d",&p[i].bt,&p[i].py);
  }
printf("\nprocess      :")  ;
for(i=0;i<n;i++)
 {
    printf("  %d",p[i].n);
 }
printf("\nPriority     :")  ;
for(i=0;i<n;i++)
 {
    printf("  %d",p[i].py);
 }

printf("\nBrust time   :");
for(i=0;i<n;i++)
 {
    printf("  %d",p[i].bt);
 }
for(i=0;i<n;i++)
{
  for(j=i+1;j<n;j++)
   {
if(p[i].py>p[j].py)             //sorting
 {
temp=p[i].bt;
p[i].bt=p[j].bt;
p[j].bt=temp;
temp=p[i].n;
p[i].n=p[j].n;
p[j].n=temp;
temp=p[i].py;
p[i].py=p[j].py;
p[j].py=temp;
 }
   }
}

printf("\n Gaint chart \n\t");
for(i=0;i<n;i++)
 {
    printf("\tP%d",p[i].n);
 }
printf("\nWaiting time:"); q=0; aw=0;
for(i=0;i<n;i++)
{
  printf("\t %d",q);
  aw=aw+q;
  q=q+p[i].bt;
}
printf("\n\nWaiting time for all process   %d",aw);
awt=aw;
printf("\nAverage Waiting time   %f",awt/n);

return(0);
}
/* ROUND ROBIN SCHEDULING ALGORITHM */


#include<stdio.h>
#include<conio.h>
int main()
{
 int ts,pid[10],need[10],wt[10],tat[10],i,j,n,n1;
 int bt[10],flag[10],ttat=0,twt=0;
 float awt,atat;
 printf("\t\t ROUND ROBIN SCHEDULING"); 
printf("\n Enter the number of Processors\n");
scanf("%d",&n);
 n1=n;
printf("\n Enter the Timeslice\n");
scanf("%d",&ts);
 for(i=1;i<=n;i++)
 {
   printf("\n Enter the process ID %d : ",i); 
scanf("%d",&pid[i]);
   
printf("\n Enter the Burst Time for the process\n");
   
scanf("%d",&bt[i]);
   need[i]=bt[i];
 }

 for(i=1;i<=n;i++)
 
{
  flag[i]=1;
  wt[i]=0;
 }
 
while(n!=0)

 {
   for(i=1;i<=n;i++)
   
{
     if(need[i]>=ts)
     
{
       for(j=1;j<=n;j++)
       
{
	  if((i!=j)&&(flag[i]==1)&&(need[j]!=0))
	  
wt[j]+=ts;
}
       
need[i]-=ts;
      
 if(need[i]==0)
      
 {
	 flag[i]=0;
	 n--;
       }
     }
     
else
    
 {
       for(j=1;j<=n;j++)
      
 {
	  if((i!=j)&&(flag[i]==1)&&(need[j]!=0))
	  
wt[j]+=need[i];
       }
       
need[i]=0;
       
n--;
       
       flag[i]=0;
  
 }
 }
}

for(i=1;i<=n1;i++)

{
  tat[i]=wt[i]+bt[i];
  
twt=twt+wt[i];
  
ttat=ttat+tat[i];
}

awt=(float)twt/n1;

atat=(float)ttat/n1;


printf("\n\n ROUND ROBIN SCHEDULING ALGORITHM \n\n");

printf("\n\n Process \t Process ID  \t BurstTime \t Waiting Time \t TurnaroundTime \n ");

for(i=1;i<=n1;i++)
{
 
 printf("\n %5d \t %5d \t\t %5d \t\t %5d \t\t %5d \n", i,pid[i],bt[i],wt[i],tat[i]);

printf("\n The average Waiting Time=4.2f",awt);

printf("\n The average Turn around Time=4.2f",atat);
getch();
}         
